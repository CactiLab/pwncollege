#!/bin/sh

cd /opt/pwn.college

if [ -n "$1" ]
then
    ACTION="$1"
    shift
else
    ACTION="help"
fi

case "$ACTION" in
    # HELP: update: update dojo files (warning: does `git pull`) and rebuild containers
    "update")
        git pull
        dojo compose build
        dojo compose up -d
        ;;

    # HELP: enter USER_ID: enter a user's running container. Can change users via USER env var.
    "enter")
        CONTAINER="user_$1"
        shift
        if [ -n "$USER" ]; then
            docker exec -it "$CONTAINER" bash
        else
            docker exec -it --user="$USER" "$CONTAINER" bash
        fi
        ;;
    # HELP: history USER_ID [api]: view a user's bash history. Saves a snapshot to a text file in data/homes/history. If calling via the API, add "api" after the USER_ID.
    "history")
        PREFIX="data/homes"
        if [ $2 = "api" ]; then
            PREFIX="/var/data/homes"
        fi
        HOME_PATH="$PREFIX/data/$1"
        OUTPUT_PATH="$PREFIX/history/$1"
        MOUNT_PATH="$PREFIX/history/$1_mount"
        SNAPSHOT_TIME=$(TZ=America/New_York date +"%F-%R%Z")
        SNAPSHOT_PATH="$OUTPUT_PATH/$1-snapshot-$SNAPSHOT_TIME"
        if [ -f "$HOME_PATH" ]; then 
            echo "Reading history from $HOME_PATH..."
            mkdir -p $OUTPUT_PATH $MOUNT_PATH
            mount -o loop $HOME_PATH $MOUNT_PATH
            if [ -f "$MOUNT_PATH/.bash_history" ]; then
                # Extract history file from filesystem
                echo "Creating history snapshot: \"$SNAPSHOT_PATH\""
                cp "$MOUNT_PATH/.bash_history" $SNAPSHOT_PATH
                umount $MOUNT_PATH
                rm -rf $MOUNT_PATH

                # Convert UNIX timestamp to readable date
                # echo "Formatting timestamps..."
                sed -E -i "s/^#([0-9]+).*$/TZ=America\/New_York date -d @\1 '+#%F %T%Z'/e" $SNAPSHOT_PATH
                echo "Done! View snapshot at $SNAPSHOT_PATH"
            else
                echo "ERROR: Failed to locate history file at $MOUNT_PATH/.bash_history on the user $1's filesystem."
            fi
        else
            echo "Error: $1 doesn't have a filesystem saved to the database."
        fi
        ;;

    # HELP: compose ARGS: run a docker compose command with the config.env file loaded
    "compose")
        docker compose --env-file=/opt/pwn.college/data/config.env "$@"
        ;;

    # HELP: flask: drop into a flask shell in the ctfd container
    "flask")
        docker exec -it ctfd flask shell "$@"
        ;;

    # HELP: db: launch a mysql client session, connected to the ctfd db
    "db")
        docker exec -it db mysql -pctfd -Dctfd ctfd "$@"
        ;;

    "backup") # Does a dojo db backup into the `data/backups` directory.
        mkdir -p data/backups
        docker exec db mysqldump -pctfd --single-transaction --routines --triggers ctfd | gzip > "data/backups/db-$(date -Iseconds).sql.gz"
        ;;

    # HELP: resture PATH: restores a dojo db backup. Path arg is relative to the `data/backups` directory
    "restore")
        BACKUP_PATH="data/backups/$1"
        if [ -f "$BACKUP_PATH" ]; then
            gunzip < "$BACKUP_PATH" | docker exec -i db mysql -pctfd -Dctfd
        else
            echo "Error: missing file to restore from" >&2
        fi
        ;;

    # HELP: logs: display dojo logs
    "logs")
        journalctl -u pwn.college -f
        ;;

    # HELP: restart: restarts just the ctfd container
    "restart")
        for cmd in 'build ctfd' 'kill ctfd' 'rm -f ctfd' 'up -d ctfd' 'logs -f ctfd'; do
            docker compose --env-file=/opt/pwn.college/data/config.env $cmd;
        done
        ;;

    # HELP: start: start the dojo. Main entry point for the docker image.
    "start")
        echo "[+] Setting up container runtime environment."
        container-setup.sh
        echo "[+] Starting systemd. If this is the first start, the challenge container"
        echo "    will be built, which will take a very long time."
        exec /usr/bin/systemd
        ;;

    # HELP: help: displays this help
    "help")
        echo "Usage: $0 COMMAND [ ARG ]"
	echo
	echo "COMMANDS:"
	echo
	cat "$0" | grep "[H]ELP" | sed -e "s/.*H[E]LP: /\t/"
        ;;

    *)
        echo "Unknown command."
	echo ""
	"$0" help
        exit 1
        ;;
esac
